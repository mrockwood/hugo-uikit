/**
 * Name:            Utility
 * Description:     Utilities collection
 *
 * Component:       `c-panel-*`
 *                  `c-clearfix`
 *                  `c-float-*`
 *                  `c-overflow-*`
 *                  `c-resize-*`
 *                  `c-display-*`
 *                  `c-inline-*`
 *                  `c-responsive-*`
 *                  `c-preserve-width`
 *                  `c-border-*`
 *                  `c-box-shadow-*`
 *                  `c-box-shadow-bottom`
 *                  `c-dropcap`
 *                  `c-logo`
 *                  `c-blend-*`
 *                  `c-transform-*`
 *                  `c-transform-origin-*`
 *
 * States:          `c-disabled`
 *                  `c-drag`
 *                  `c-dragover`
 *                  `c-preserve`
 *
 * ======================================================================== */


/**
 * Variables
 * ======================================================================== */

:root {

    --panel-scrollable-height:                       170px;
    --panel-scrollable-padding:                      10px;
    --panel-scrollable-border-width:                 var(--global-border-width);
    --panel-scrollable-border:                       var(--global-border);

    --border-rounded-border-radius:                  5px;

    --box-shadow-duration:                           0.1s;

    --box-shadow-bottom-height:                      30px;
    --box-shadow-bottom-border-radius:               100%;
    --box-shadow-bottom-background:                  #444;
    --box-shadow-bottom-blur:                        20px;

    --dropcap-margin-right:                          10px;
    --dropcap-font-size:                             calc((var(--global-line-height) * 3) * 1em);

    --logo-font-size:                                var(--global-large-font-size);
    --logo-font-family:                              var(--global-font-family);
    --logo-color:                                    var(--global-color);
    --logo-hover-color:                              var(--global-color);

    --dragover-box-shadow:                           0 0 20px rgba(100,100,100,0.3);

}


/* ========================================================================
   Component: Utility
 ========================================================================== */


/* Panel
 ========================================================================== */

.c-panel {
    position: relative;
    box-sizing: border-box;
}

/*
 * Micro clearfix
 */

.c-panel::before,
.c-panel::after {
    content: "";
    display: table;
}

.c-panel::after { clear: both; }

/*
 * Remove margin from the last-child
 */

.c-panel > :last-child { margin-bottom: 0; }


/*
 * Scrollable
 */

.c-panel-scrollable {
    height: var(--panel-scrollable-height);
    padding: var(--panel-scrollable-padding);
    border: var(--panel-scrollable-border-width) solid var(--panel-scrollable-border);
    overflow: auto;
    -webkit-overflow-scrolling: touch;
    resize: both;
}


/* Clearfix
 ========================================================================== */

/*
 * 1. `table-cell` is used with `::before` because `table` creates a 1px gap when it becomes a flex item, only in Webkit
 * 2. `table` is used again with `::after` because `clear` only works with block elements.
 * Note: `display: block` with `overflow: hidden` is currently not working in the latest Safari
 */

/* 1 */
.c-clearfix::before {
    content: "";
    display: table-cell;
}

/* 2 */
.c-clearfix::after {
    content: "";
    display: table;
    clear: both;
}


/* Float
 ========================================================================== */

/*
 * 1. Prevent content overflow
 */

.c-float-left { float: left; }
.c-float-right { float: right; }

/* 1 */
[class*='c-float-'] { max-width: 100%; }


/* Overfow
 ========================================================================== */

.c-overflow-hidden { overflow: hidden; }

/*
 * Enable scrollbars if content is clipped
 * Note: Firefox ignores `padding-bottom` for the scrollable overflow https://bugzilla.mozilla.org/show_bug.cgi?id=748518
 */

.c-overflow-auto {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
}

.c-overflow-auto > :last-child { margin-bottom: 0; }


/* Resize
 ========================================================================== */

.c-resize { resize: both; }
.c-resize-vertical { resize: vertical; }


/* Display
 ========================================================================== */

.c-display-block { display: block !important; }
.c-display-inline { display: inline !important; }
.c-display-inline-block { display: inline-block !important; }


/* Inline
 ========================================================================== */

/*
 * 1. Container fits its content
 * 2. Create position context
 * 3. Prevent content overflow
 * 4. Behave like most inline-block elements
 * 5. Force hardware acceleration without creating a new stacking context
 *    to fix 1px glitch when combined with overlays and transitions in Webkit
 * 6. Clip child elements
 */

[class*='c-inline'] {
    /* 1 */
    display: inline-block;
    /* 2 */
    position: relative;
    /* 3 */
    max-width: 100%;
    /* 4 */
    vertical-align: middle;
    /* 5 */
    -webkit-backface-visibility: hidden;
}

.c-inline-clip {
    /* 6 */
    overflow: hidden;
}


/* Responsive objects
 ========================================================================== */

/*
 * Preserve original dimensions
 * Because `img, `video`, `canvas` and  `audio` are already responsive by default, see Base component
 */

.c-preserve-width,
.c-preserve-width canvas,
.c-preserve-width img,
.c-preserve-width svg,
.c-preserve-width video { max-width: none; }

/*
 * Responsiveness
 * Corrects `max-width` and `max-height` behavior if padding and border are used
 */

.c-responsive-width,
.c-responsive-height { box-sizing: border-box; }

/*
 * 1. Set a maximum width. `important` needed to override `c-preserve-width img`
 * 2. Auto scale the height. Only needed if `height` attribute is present
 */

.c-responsive-width {
    /* 1 */
    max-width: 100% !important;
    /* 2 */
    height: auto;
}

/*
 * 1. Set a maximum height. Only works if the parent element has a fixed height
 * 2. Auto scale the width. Only needed if `width` attribute is present
 * 3. Reset max-width, which `img, `video`, `canvas` and  `audio` already have by default
 */

.c-responsive-height {
    /* 1 */
    max-height: 100%;
    /* 2 */
    width: auto;
    /* 3 */
    max-width: none;
}


/* Border
 ========================================================================== */

.c-border-circle { border-radius: 50%; }
.c-border-pill { border-radius: 500px; }
.c-border-rounded { border-radius: var(--border-rounded-border-radius); }

/*
 * Fix `overflow: hidden` to be ignored with border-radius and CSS transforms in Webkit
 */

.c-inline-clip[class*='c-border-'] { -webkit-transform: translateZ(0); }


/* Box-shadow
 ========================================================================== */

.c-box-shadow-small { box-shadow: var(--global-small-box-shadow); }
.c-box-shadow-medium { box-shadow: var(--global-medium-box-shadow); }
.c-box-shadow-large { box-shadow: var(--global-large-box-shadow); }
.c-box-shadow-xlarge { box-shadow: var(--global-xlarge-box-shadow); }

/*
 * Hover
 */

[class*='c-box-shadow-hover'] { transition: box-shadow var(--box-shadow-duration) ease-in-out; }

.c-box-shadow-hover-small:hover { box-shadow: var(--global-small-box-shadow); }
.c-box-shadow-hover-medium:hover { box-shadow: var(--global-medium-box-shadow); }
.c-box-shadow-hover-large:hover { box-shadow: var(--global-large-box-shadow); }
.c-box-shadow-hover-xlarge:hover { box-shadow: var(--global-xlarge-box-shadow); }


/* Box-shadow bottom
 ========================================================================== */

/*
 * 1. Set position.
 * 2. Set style
 * 3. Blur doesn't work on pseudo elements with negative `z-index` in Edge.
 *    Solved by using `before` and add position context to child elements.
 */

@supports (filter: blur(0)) {

    .c-box-shadow-bottom {
        display: inline-block;
        position: relative;
        max-width: 100%;
        vertical-align: middle;
    }

    .c-box-shadow-bottom::before {
        content: '';
        /* 1 */
        position: absolute;
        bottom: calc(var(--box-shadow-bottom-height) * -1);
        left: 0;
        right: 0;
        /* 2 */
        height: var(--box-shadow-bottom-height);
        border-radius: var(--box-shadow-bottom-border-radius);
        background: var(--box-shadow-bottom-background);
        filter: blur(var(--box-shadow-bottom-blur));
    }

    /* 3 */
    .c-box-shadow-bottom > * { position: relative; }

}


/* Drop cap
 ========================================================================== */

/*
 * 1. Firefox doesn't apply `::first-letter` if the first letter is inside child elements
 *    https://bugzilla.mozilla.org/show_bug.cgi?id=214004
 * 2. In Firefox, a floating `::first-letter` doesn't have a line box and there for no `line-height`
 *    https://bugzilla.mozilla.org/show_bug.cgi?id=317933
 * 3. Caused by 1.: Edge creates two nested `::first-letter` containers, one for each selector
 *    This doubles the `font-size` exponential when using the `em` unit.
 */

.c-dropcap::first-letter,
/* 1 */
.c-dropcap > p:first-of-type::first-letter {
    display: block;
    margin-right: var(--dropcap-margin-right);
    margin-bottom: -2px; /* Prevent line wrap */
    float: left;
    font-size: var(--dropcap-font-size);
    line-height: 1;
}

/* 2 */
@-moz-document url-prefix() {

  .c-dropcap::first-letter,
  .c-dropcap > p:first-of-type::first-letter { margin-top: 1.1%; }

}

/* 3 */
@supports (-ms-ime-align: auto) {

  .c-dropcap > p:first-of-type::first-letter { font-size: 1em; }

}


/* Logo
 ========================================================================== */

/*
 * 1. Required for `a`
 */

.c-logo {
    font-size: var(--logo-font-size);
    font-family: var(--logo-font-family);
    color: var(--logo-color);
    /* 1 */
    text-decoration: none;
}

/* Hover + Focus */
.c-logo:hover,
.c-logo:focus {
    color: var(--logo-hover-color);
    outline: none;
    /* 1 */
    text-decoration: none;
}

.c-logo-inverse { display: none; }


/* Disabled State
 ========================================================================== */

.c-disabled { pointer-events: none; }


/* Drag State
 ========================================================================== */

/*
 * 1. Needed if moving over elements with have their own cursor on hover, e.g. links or buttons
 * 2. Fix dragging over iframes
 */

.c-drag,
/* 1 */
.c-drag * { cursor: move; }

/* 2 */
.c-drag iframe { pointer-events: none; }


/* Dragover State
 ========================================================================== */

/*
 * Create a box-shadow when dragging a file over the upload area
 */

.c-dragover { box-shadow: var(--dragover-box-shadow); }


/* Blend modes
 ========================================================================== */

.c-blend-multiply { mix-blend-mode: multiply; }
.c-blend-screen { mix-blend-mode: screen; }
.c-blend-overlay { mix-blend-mode: overlay; }
.c-blend-darken { mix-blend-mode: darken; }
.c-blend-lighten { mix-blend-mode: lighten; }
.c-blend-color-dodge { mix-blend-mode: color-dodge; }
.c-blend-color-burn { mix-blend-mode: color-burn; }
.c-blend-hard-light { mix-blend-mode: hard-light; }
.c-blend-soft-light { mix-blend-mode: soft-light; }
.c-blend-difference { mix-blend-mode: difference; }
.c-blend-exclusion { mix-blend-mode: exclusion; }
.c-blend-hue { mix-blend-mode: hue; }
.c-blend-saturation { mix-blend-mode: saturation; }
.c-blend-color { mix-blend-mode: color; }
.c-blend-luminosity { mix-blend-mode: luminosity; }


/* Transform
========================================================================== */

.c-transform-center { transform: translate(-50%, -50%); }


/* Transform Origin
========================================================================== */

.c-transform-origin-top-left { transform-origin: 0 0; }
.c-transform-origin-top-center { transform-origin: 50% 0; }
.c-transform-origin-top-right { transform-origin: 100% 0; }
.c-transform-origin-center-left { transform-origin: 0 50%; }
.c-transform-origin-center-right { transform-origin: 100% 50%; }
.c-transform-origin-bottom-left { transform-origin: 0 100%; }
.c-transform-origin-bottom-center { transform-origin: 50% 100%; }
.c-transform-origin-bottom-right { transform-origin: 100% 100%; }
